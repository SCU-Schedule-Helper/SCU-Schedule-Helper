{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "ddc4c37f-5502-4767-a0f3-40ccc79f69b9",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node: Federal Register Data Processor\n// This node processes the Federal Register API response and extracts specific fields\n// for storage in PostgreSQL database\n\n// Get the input data from the previous node\nconst inputData = $input.all();\n\n// Initialize array to store processed documents\nconst processedDocuments = [];\n\n// Helper function to safely extract agency names\nfunction extractAgencyNames(agencies) {\n  if (!agencies || !Array.isArray(agencies)) {\n    return [];\n  }\n  \n  return agencies.map(agency => {\n    // Prefer raw_name, fallback to name, then to slug if available\n    return agency.raw_name || agency.name || agency.slug || 'Unknown Agency';\n  });\n}\n\n// Helper function to format date\nfunction formatDate(dateString) {\n  if (!dateString) return null;\n  \n  try {\n    // Handle different date formats from Federal Register API\n    const date = new Date(dateString);\n    if (isNaN(date.getTime())) return null;\n    \n    return date.toISOString().split('T')[0]; // Return YYYY-MM-DD format\n  } catch (error) {\n    console.error('Error formatting date:', dateString, error);\n    return null;\n  }\n}\n\n// Process each item in the input\nfor (const item of inputData) {\n  try {\n    // Handle different possible response structures\n    let results = [];\n    \n    if (item.json && item.json.results) {\n      // Standard response structure\n      results = item.json.results;\n    } else if (item.json && Array.isArray(item.json)) {\n      // Direct array of documents\n      results = item.json;\n    } else if (item.json && item.json.data && Array.isArray(item.json.data)) {\n      // Alternative response structure\n      results = item.json.data;\n    } else if (Array.isArray(item.json)) {\n      // Direct array input\n      results = item.json;\n    }\n    \n    // Process each document in the results\n    for (const document of results) {\n      try {\n        // Validate that this is a document object\n        if (!document || typeof document !== 'object') {\n          continue;\n        }\n        \n        // Extract the required fields with fallbacks\n        const processedDocument = {\n          document_number: document.document_number || document.id || null,\n          title: document.title || document.name || 'Untitled Document',\n          abstract: document.abstract || document.summary || null,\n          html_url: document.html_url || document.url || null,\n          pdf_url: document.pdf_url || null,\n          publication_date: formatDate(document.publication_date || document.published_at),\n          agencies: JSON.stringify(extractAgencyNames(document.agencies)),\n          document_type: document.document_type || document.type || 'UNKNOWN'\n        };\n        \n        // Only include documents that have a document_number (required for primary key)\n        if (processedDocument.document_number) {\n          processedDocuments.push(processedDocument);\n        } else {\n          console.warn('Skipping document without document_number:', document.title || 'Unknown');\n        }\n      } catch (error) {\n        console.error('Error processing individual document:', error);\n        // Continue processing other documents even if one fails\n      }\n    }\n  } catch (error) {\n    console.error('Error processing input item:', error);\n  }\n}\n\n// Log summary\nconsole.log(`Processed ${processedDocuments.length} documents for database storage`);\n\n// Return the processed data\nreturn processedDocuments.map(doc => ({ json: doc }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        0
      ],
      "id": "b126feaa-856d-458e-87e8-d94c7305461f",
      "name": "Code"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "federal_register_documents",
          "mode": "list",
          "cachedResultName": "federal_register_documents"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {
            "id": 0
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "document_number",
              "displayName": "document_number",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "title",
              "displayName": "title",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "abstract",
              "displayName": "abstract",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "html_url",
              "displayName": "html_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "pdf_url",
              "displayName": "pdf_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "publication_date",
              "displayName": "publication_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "agencies",
              "displayName": "agencies",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "document_type",
              "displayName": "document_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        660,
        0
      ],
      "id": "15792cfc-aa84-4dc9-acbd-c260e3d79684",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "bQ2652bC1RAcQy4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// N8N Code Node: Transform regulations.gov data for PostgreSQL\n// This code processes the regulations.gov API response and creates normalized JSON objects\n\nconst inputData = $input.all();\nconst outputItems = [];\n\n// Function to safely parse date strings\nfunction parseDate(dateString) {\n  if (!dateString) return null;\n  try {\n    return new Date(dateString).toISOString();\n  } catch (error) {\n    console.log(`Error parsing date: ${dateString}`, error);\n    return null;\n  }\n}\n\n// Function to extract and clean text data\nfunction cleanString(str) {\n  if (!str) return null;\n  return str.trim();\n}\n\n// Process each input item\ninputData.forEach((item, index) => {\n  try {\n    // Parse the data if it's a string, otherwise use directly\n    let data;\n    if (typeof item.json.data === 'string') {\n      data = JSON.parse(item.json.data);\n    } else {\n      data = item.json;\n    }\n\n    // Extract the data array from the response\n    const documentsArray = data.data || [];\n\n    // Process each document in the array\n    documentsArray.forEach((document) => {\n      const attributes = document.attributes || {};\n      \n      // Create normalized JSON object for PostgreSQL\n      const normalizedDocument = {\n        // Primary identifiers\n        document_id: cleanString(document.id),\n        docket_id: cleanString(attributes.docketId),\n        object_id: cleanString(attributes.objectId),\n        fr_doc_num: cleanString(attributes.frDocNum),\n        \n        // Document metadata\n        document_type: cleanString(attributes.documentType),\n        title: cleanString(attributes.title),\n        agency_id: cleanString(attributes.agencyId),\n        subtype: cleanString(attributes.subtype),\n        \n        // Status flags\n        withdrawn: attributes.withdrawn || false,\n        allow_late_comments: attributes.allowLateComments || false,\n        within_comment_period: attributes.withinCommentPeriod || false,\n        open_for_comment: attributes.openForComment || false,\n        \n        // Dates (converted to ISO format for PostgreSQL)\n        posted_date: parseDate(attributes.postedDate),\n        last_modified_date: parseDate(attributes.lastModifiedDate),\n        comment_start_date: parseDate(attributes.commentStartDate),\n        comment_end_date: parseDate(attributes.commentEndDate),\n        \n        // Content\n        highlighted_content: cleanString(attributes.highlightedContent) || '',\n        \n        // API links\n        api_self_link: document.links?.self || null,\n        \n        // Metadata for tracking\n        processed_at: new Date().toISOString(),\n        data_source: 'regulations.gov',\n        \n        // Raw data backup (optional - for debugging/auditing)\n        raw_attributes: JSON.stringify(attributes)\n      };\n\n      // Add the processed document to output\n      outputItems.push({\n        json: normalizedDocument,\n        pairedItem: { item: index }\n      });\n    });\n\n  } catch (error) {\n    console.error(`Error processing item ${index}:`, error);\n    \n    // Create error record for problematic items\n    outputItems.push({\n      json: {\n        document_id: `error_${index}_${Date.now()}`,\n        title: `Processing Error - Item ${index}`,\n        document_type: 'Error',\n        agency_id: 'PROCESSING_ERROR',\n        withdrawn: false,\n        allow_late_comments: false,\n        within_comment_period: false,\n        open_for_comment: false,\n        processed_at: new Date().toISOString(),\n        data_source: 'regulations.gov',\n        error_message: error.message,\n        raw_data: JSON.stringify(item.json)\n      },\n      pairedItem: { item: index }\n    });\n  }\n});\n\n// Log processing summary\nconsole.log(`Processed ${outputItems.length} documents from ${inputData.length} input items`);\n\n// Return the processed items\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        220
      ],
      "id": "892eb3f7-8896-41fd-84e0-18e750bcb7c1",
      "name": "Code1"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "regulations_documents",
          "mode": "list",
          "cachedResultName": "regulations_documents"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {
            "withdrawn": false,
            "allow_late_comments": false,
            "within_comment_period": false,
            "open_for_comment": false
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "document_id",
              "displayName": "document_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "docket_id",
              "displayName": "docket_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "object_id",
              "displayName": "object_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "fr_doc_num",
              "displayName": "fr_doc_num",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "document_type",
              "displayName": "document_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "agency_id",
              "displayName": "agency_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "subtype",
              "displayName": "subtype",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "withdrawn",
              "displayName": "withdrawn",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true
            },
            {
              "id": "allow_late_comments",
              "displayName": "allow_late_comments",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true
            },
            {
              "id": "within_comment_period",
              "displayName": "within_comment_period",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true
            },
            {
              "id": "open_for_comment",
              "displayName": "open_for_comment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true
            },
            {
              "id": "posted_date",
              "displayName": "posted_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "last_modified_date",
              "displayName": "last_modified_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "comment_start_date",
              "displayName": "comment_start_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "comment_end_date",
              "displayName": "comment_end_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "highlighted_content",
              "displayName": "highlighted_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "api_self_link",
              "displayName": "api_self_link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "processed_at",
              "displayName": "processed_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "data_source",
              "displayName": "data_source",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "raw_attributes",
              "displayName": "raw_attributes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            },
            {
              "id": "error_message",
              "displayName": "error_message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "raw_data",
              "displayName": "raw_data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        660,
        220
      ],
      "id": "39e495ca-ab99-4c99-ad1a-e3e79b66beaf",
      "name": "Postgres3",
      "credentials": {
        "postgres": {
          "id": "bQ2652bC1RAcQy4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT *\nFROM federal_register_documents \nWHERE tags IS NOT NULL\nAND embedding_json IS NOT NULL\nORDER BY created_at DESC;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        80,
        -180
      ],
      "id": "8fb63281-d0d0-4dbc-82a7-e0a75995d23c",
      "name": "test fedreg",
      "credentials": {
        "postgres": {
          "id": "bQ2652bC1RAcQy4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const rawAttributes = $json.raw_attributes;\n\nconst textToAnalyze = [\n    rawAttributes.title || '',\n    rawAttributes.subtype || '',\n    rawAttributes.documentType || '',\n    rawAttributes.agencyId || ''\n].filter(Boolean).join('. ');\n\nreturn {\n    document_id: $json.id,\n    text_content: textToAnalyze,\n    agency: rawAttributes.agencyId,\n    doc_type: rawAttributes.documentType,\n    subtype: rawAttributes.subtype\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        400
      ],
      "id": "255d74bf-64c5-4e28-9093-882762bc39d0",
      "name": "Code2"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "GPT-3.5-TURBO"
        },
        "messages": {
          "values": [
            {
              "content": "You are a regulatory document classifier. Analyze federal regulatory documents and return semantic tags as valid JSON only. Use these exact field names: agency, regulation_type, industries, topics, impact_level, geographic_scope.",
              "role": "system"
            },
            {
              "content": "=Classify this regulatory document:\n\nDocument ID: {{$json.document_id}}\nTitle: {{$json.text_content}}\nAgency: {{$json.agency}}\nDocument Type: {{$json.doc_type}}\n\nReturn only valid JSON with these fields (include the document_id):\n{\n  \"document_id\": {{$json.document_id}},\n  \"agency\": \"{{$json.agency}}\",\n  \"regulation_type\": \"proposed_rule\" or \"final_rule\" or \"notice\" or \"guidance\",\n  \"industries\": [\"relevant\", \"industries\"],\n  \"topics\": [\"specific\", \"regulatory\", \"topics\"],\n  \"impact_level\": \"high\" or \"medium\" or \"low\",\n  \"geographic_scope\": \"national\" or \"state\" or \"local\" or \"international\"\n}\n\nFor the EPA air quality example, topics might include: [\"air_quality\", \"ozone_standards\", \"environmental_protection\"]"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        660,
        400
      ],
      "id": "558a5ff5-f2d8-477e-bd0b-4fb98701fa42",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "x3Ub885BFL4NlkMy",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const response = $json.message.content;\n\nreturn {\n    document_id: response.document_id,\n    tags: {\n        agency: response.agency,\n        regulation_type: response.regulation_type,\n        industries: response.industries,\n        topics: response.topics,\n        impact_level: response.impact_level,\n        geographic_scope: response.geographic_scope\n    },\n    tagged_at: new Date().toISOString()\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        400
      ],
      "id": "5a5ef07c-62fe-481f-b8d1-5f7622d4d07d",
      "name": "Code3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE regulations_documents \nSET tags = $1::jsonb\nWHERE id = $2",
        "options": {
          "queryReplacement": "={{ $json.tags_json }}, {{ $json.document_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1420,
        400
      ],
      "id": "6dbc4e3e-8304-42fd-86a1-baa9031cd467",
      "name": "Postgres6",
      "credentials": {
        "postgres": {
          "id": "bQ2652bC1RAcQy4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const tagsJsonString = JSON.stringify($json.tags);\nconst documentId = $json.document_id;\n\nreturn {\n    tags_json: tagsJsonString,\n    document_id: documentId\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        400
      ],
      "id": "3e6d7c6a-6041-4a1f-80c0-21a1eb470905",
      "name": "stringify"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n    id,\n    api_self_link,\n    raw_attributes,\n    processed_at\nFROM regulations_documents \nWHERE tags IS NULL;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        220,
        400
      ],
      "id": "7c5945ba-8f1e-45c8-b7c2-19c50094b238",
      "name": "tag dockets",
      "credentials": {
        "postgres": {
          "id": "bQ2652bC1RAcQy4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n    document_number,\n    title,\n    abstract,\n    document_type,\n    agencies,\n    html_url\nFROM federal_register_documents \nWHERE tags IS NULL\nLIMIT 150;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        220,
        600
      ],
      "id": "28640f91-474c-44c4-9ff9-296401ace0eb",
      "name": "tag docs",
      "credentials": {
        "postgres": {
          "id": "bQ2652bC1RAcQy4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "GPT-3.5-TURBO"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a regulatory document classifier. Analyze Federal Register documents and return semantic tags as valid JSON. Be specific and accurate - do not use placeholder text.",
              "role": "system"
            },
            {
              "content": "=Classify this Federal Register document:\n\nDocument Number: {{$json.document_number}}\nTitle: {{$json.title}}\nText Content: {{$json.text_content}}\nAgency: {{$json.agency}}\nDocument Type: {{$json.doc_type}}\nAbstract: {{$json.abstract}}\n\nReturn only valid JSON with these fields (include the document_number):\n{\n  \"document_number\": \"{{$json.document_number}}\",\n  \"agency\": \"DOC\",\n  \"regulation_type\": \"notice\",\n  \"industries\": [\"international_trade\", \"export_control\"],\n  \"topics\": [\"export_licensing\", \"sanctions\", \"trade_violations\"],\n  \"impact_level\": \"medium\",\n  \"geographic_scope\": \"national\"\n}\n\nClassification guidelines:\n- agency: Use standard acronyms (DOC for Department of Commerce, BIS for Bureau of Industry and Security)\n- regulation_type: Map document types - \"Notice\"=notice, \"Proposed Rule\"=proposed_rule, \"Final Rule\"=final_rule\n- industries: Identify affected sectors\n- topics: Extract specific regulatory subjects\n- impact_level: high=major rules, medium=standard enforcement, low=routine notices\n- geographic_scope: national=federal jurisdiction, state=state-specific, local=city/county\n\nFor export denial orders:\n- agency: \"BIS\" or \"DOC\" \n- regulation_type: \"notice\"\n- industries: [\"international_trade\", \"export_control\"]\n- topics: [\"export_licensing\", \"sanctions\", \"trade_violations\"]\n- impact_level: \"medium\"\n- geographic_scope: \"national\""
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        660,
        600
      ],
      "id": "6b269d33-ab02-44f7-8157-fbea01588f78",
      "name": "OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "x3Ub885BFL4NlkMy",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Federal Register documents have different structure than regulations.gov\nconst textToAnalyze = [\n    $json.title || '',\n    $json.abstract || '',\n    $json.document_type || '',\n    $json.agencies || ''\n].filter(Boolean).join('. ');\n\n// Extract primary agency from agencies array\nlet primaryAgency = '';\nif ($json.agencies) {\n    try {\n        const agenciesArray = JSON.parse($json.agencies);\n        primaryAgency = agenciesArray[0] || '';\n    } catch (e) {\n        primaryAgency = $json.agencies;\n    }\n}\n\nreturn {\n    document_number: $json.document_number,\n    text_content: textToAnalyze,\n    agency: primaryAgency,\n    doc_type: $json.document_type,\n    title: $json.title,\n    abstract: $json.abstract\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        600
      ],
      "id": "af5fc8e7-73c1-4598-95e0-61283b0842b3",
      "name": "Code4"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// For processing an array of items, n8n will iterate through each item\n// $json represents the current item in the array\n\nconst content = $json.message.content;\n\nreturn {\n    document_number: content.document_number,\n    tags: {\n        agency: content.agency,\n        regulation_type: content.regulation_type,\n        industries: content.industries || [],\n        topics: content.topics || [],\n        impact_level: content.impact_level,\n        geographic_scope: content.geographic_scope\n    },\n    refusal: $json.message.refusal,\n    annotations: $json.message.annotations || [],\n    logprobs: $json.logprobs,\n    finish_reason: $json.finish_reason,\n    tagged_at: new Date().toISOString()\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        600
      ],
      "id": "a1fe8ac4-d383-4676-876b-24f0ef69aa06",
      "name": "Code5"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "\nconst tagsJsonString = JSON.stringify($json.tags);\nconst documentId = $json.document_number;\n\nreturn {\n    tags_json: tagsJsonString,\n    document_id: documentId\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        600
      ],
      "id": "0ac1827e-dd88-4e24-b9c3-c11f04ae6413",
      "name": "Code6"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE federal_register_documents\nSET tags = $1::jsonb\nWHERE document_number = $2",
        "options": {
          "queryReplacement": "={{ $json.tags_json }}, {{ $json.document_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1420,
        600
      ],
      "id": "1b875ed8-b86a-4a21-a6b9-e40952572b82",
      "name": "Postgres2",
      "credentials": {
        "postgres": {
          "id": "bQ2652bC1RAcQy4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "4620804b-4faf-4044-817b-57523a4fd945",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        100,
        1380
      ],
      "id": "029e8297-2695-45d3-94db-47e55d3d33da",
      "name": "Webhook",
      "webhookId": "4620804b-4faf-4044-817b-57523a4fd945"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO newsletter_subscriptions (name, email, description, agencies, industries, topics, document_types)\nVALUES ($1, $2, $3, $4::text[], $5::text[], $6::text[], $7::text[])\nON CONFLICT (email) \nDO UPDATE SET \n  name = EXCLUDED.name,\n  description = EXCLUDED.description,\n  agencies = EXCLUDED.agencies,\n  industries = EXCLUDED.industries,\n  topics = EXCLUDED.topics,\n  document_types = EXCLUDED.document_types,\n  updated_at = CURRENT_TIMESTAMP\nRETURNING *;",
        "options": {
          "queryReplacement": "={{ $json.name }}, {{ $json.email }}, {{ $json.description }}, {{ $json.agencies }}, {{ $json.industries }}, {{ $json.topics }}, {{ $json.document_types }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        460,
        1380
      ],
      "id": "fcd5887e-6a6f-4d7c-a044-49468f2d2046",
      "name": "Postgres4",
      "credentials": {
        "postgres": {
          "id": "bQ2652bC1RAcQy4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the webhook data\nconst data = $input.first().json.body;\n\n// Convert JavaScript arrays to PostgreSQL array string format\nfunction jsArrayToPgArrayString(arr) {\n  if (!arr || arr.length === 0) {\n    return '{}'; // PostgreSQL empty array syntax\n  }\n  // Escape single quotes and wrap in PostgreSQL array format\n  const escapedItems = arr.map(item => `\"${item.replace(/\"/g, '\\\\\"')}\"`);\n  return `{${escapedItems.join(',')}}`;\n}\n\n// Process the data\nconst processedData = {\n  name: data.name,\n  email: data.email,\n  description: data.description,\n  agencies: jsArrayToPgArrayString(data.agencies),\n  industries: jsArrayToPgArrayString(data.industries),\n  topics: jsArrayToPgArrayString(data.topics),\n  document_types: jsArrayToPgArrayString(data.documentTypes)\n};\n\nreturn [{ json: processedData }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        280,
        1380
      ],
      "id": "9c40c310-5229-4331-bc65-2c7fe210bf80",
      "name": "Code7"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT *\nFROM newsletter_subscriptions\nORDER BY created_at DESC;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        600,
        -180
      ],
      "id": "b8e28979-db94-4554-b466-05205cdaadff",
      "name": "test fedreg2",
      "credentials": {
        "postgres": {
          "id": "bQ2652bC1RAcQy4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT *\nFROM regulations_documents \nORDER BY created_at DESC;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        340,
        -180
      ],
      "id": "e609b5af-1aac-4f63-85bb-6bde8cffe66b",
      "name": "test regulations",
      "credentials": {
        "postgres": {
          "id": "bQ2652bC1RAcQy4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://www.federalregister.gov/api/v1/documents",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "conditions[publication_date][gte]",
              "value": "={{ $now.minus({days: 7}).format('yyyy-MM-dd') }}"
            },
            {
              "name": "per_page",
              "value": "1000"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        220,
        0
      ],
      "id": "385e6ac8-d68e-4501-9f37-4c4bd43c76c2",
      "name": "fetch docs"
    },
    {
      "parameters": {
        "url": "https://api.regulations.gov/v4/documents",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "filter[documentType]",
              "value": "Proposed Rule, Rule"
            },
            {
              "name": "filter[postedDate][ge]",
              "value": "={{ $now.minus(7, 'days').format('yyyy-MM-dd') }}"
            },
            {
              "name": "page[size]",
              "value": "250"
            },
            {
              "name": "include",
              "value": "attachments"
            },
            {
              "name": "sort",
              "value": "-postedDate"
            },
            {
              "name": "filter[withinCommentPeriod]",
              "value": "true"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Api-Key",
              "value": "uOyfOTrMMrmkjxYCQhCUPlpDwgUTiSc9cCx2QtLa"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        220,
        220
      ],
      "id": "80a650d2-0bbd-47ba-8e9c-5d7b74ab616f",
      "name": "fetch dockets"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "text-embedding-3-small"
            },
            {
              "name": "input",
              "value": "={{ $json.embedding_text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        660,
        780
      ],
      "id": "ce82d2ab-d36b-4dd7-8c26-d243ab393d13",
      "name": "embed docs",
      "credentials": {
        "openAiApi": {
          "id": "x3Ub885BFL4NlkMy",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Get the embedding response from OpenAI API\nconst embeddingResponse = $json;\n\n// Get the document data that was passed through from Process Documents\n// The HTTP node should have passed along the original document data\nconst docData = $('Process Documents').item.json;\n\n// Alternative: if the document data isn't accessible via node reference,\n// you can get it from the HTTP node's input:\n// const docData = $input.first().json;\n\n// Combine document data with its embedding\nreturn {\n  json: {\n    ...docData,\n    embedding: embeddingResponse.data[0].embedding\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1320,
        800
      ],
      "id": "cc0e7e50-283e-4e77-9775-70db88362bbc",
      "name": "doc + embeddings"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "ALTER TABLE newsletter_subscriptions\nADD COLUMN embedding_json JSONB;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1000,
        -160
      ],
      "id": "3f3f40d4-72de-4708-b6b8-105d11ae0f4f",
      "name": "Postgres7",
      "credentials": {
        "postgres": {
          "id": "bQ2652bC1RAcQy4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "text-embedding-3-small"
            },
            {
              "name": "input",
              "value": "={{ $json.interest_text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        660,
        960
      ],
      "id": "17665704-00ce-4fed-bcc6-09ca08be1345",
      "name": "embed users",
      "credentials": {
        "openAiApi": {
          "id": "x3Ub885BFL4NlkMy",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Process single document for embedding\nconst doc = $json;\n\n// Skip if doc is null or undefined\nif (!doc) {\n  return {};\n}\n\n// Create comprehensive text for embedding\nconst embeddingText = [\n  doc.title,\n  doc.abstract || '',\n  JSON.stringify(doc.tags?.topics || []),\n  JSON.stringify(doc.tags?.industries || []),\n  doc.agencies,\n  doc.document_type\n].filter(Boolean).join(' ');\n\n// Return single object (not array)\nreturn {\n  document_id: doc.document_number,\n  title: doc.title,\n  embedding_text: embeddingText,\n  publication_date: doc.publication_date,\n  html_url: doc.html_url,\n  agencies: doc.agencies,\n  document_type: doc.document_type,\n  tags: doc.tags\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        780
      ],
      "id": "f809cb7f-a769-4aed-9bce-05e0957307de",
      "name": "Process Documents"
    },
    {
      "parameters": {
        "jsCode": "const embeddingResponse = $json;\n\n// Get the document data from the Process Documents node\nconst docData = $('Process Documents').item.json;\n\n// Combine them\nreturn {\n  json: {\n    document_id: docData.document_id,\n    document_number: docData.document_id, // for the SQL query\n    embedding: embeddingResponse.data[0].embedding,\n    title: docData.title // optional, for debugging\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        860,
        780
      ],
      "id": "d308808a-57e8-4363-87c6-9f595aadf993",
      "name": "Code8"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Get the embedding response from OpenAI\nconst embeddingResponse = $json;\n\n// Get the user data from the Process Users node\nconst userData = $('Process Users').item.json;\n\n// Combine them\nreturn {\n  json: {\n    user_id: userData.user_id,\n    embedding: embeddingResponse.data[0].embedding,\n    name: userData.name,\n    email: userData.email\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        860,
        960
      ],
      "id": "8d6f7e37-2a19-4c31-9f01-e29a13097ede",
      "name": "Code9"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Process single user for embedding\nconst user = $json;\n\n// Skip if user is null or undefined\nif (!user) {\n  return {};\n}\n\n// Create user interest profile for embedding\nconst interestText = [\n  user.description || '',\n  JSON.stringify(user.topics || []),\n  JSON.stringify(user.industries || []),\n  JSON.stringify(user.agencies || [])\n].filter(Boolean).join(' ');\n\n// Return single object\nreturn {\n  user_id: user.id,\n  name: user.name,\n  email: user.email,\n  interest_text: interestText,\n  agencies: user.agencies,\n  topics: user.topics,\n  industries: user.industries,\n  document_types: user.document_types\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        960
      ],
      "id": "1f23b18e-6196-4537-985e-ab7a6bbbc20a",
      "name": "Process Users"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE newsletter_subscriptions\nSET embedding_json = $1::jsonb \nWHERE id = $2",
        "options": {
          "queryReplacement": "={{ JSON.stringify($json.embedding) }}, {{ $json.user_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1080,
        960
      ],
      "id": "c8dfa7f0-7837-43b6-849a-6f8fedc10724",
      "name": "Postgres8",
      "credentials": {
        "postgres": {
          "id": "bQ2652bC1RAcQy4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE federal_register_documents \nSET embedding_json = $1::jsonb \nWHERE document_number = $2",
        "options": {
          "queryReplacement": "={{ JSON.stringify($json.embedding) }}, {{ $json.document_number }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1080,
        780
      ],
      "id": "4d3d6cd5-d117-4e50-ada2-a067979a3465",
      "name": "Postgres9",
      "credentials": {
        "postgres": {
          "id": "bQ2652bC1RAcQy4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM federal_register_documents \nWHERE created_at >= NOW() - INTERVAL '7 days' \nAND embedding_json is NULL\nORDER BY publication_date DESC\nLimit 100",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        220,
        780
      ],
      "id": "7d8ef105-c2db-4980-a3a8-a6b4f543dd40",
      "name": "embed docs1",
      "credentials": {
        "postgres": {
          "id": "bQ2652bC1RAcQy4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT *\nFROM newsletter_subscriptions\nWHERE embedding_json is NULL;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        220,
        960
      ],
      "id": "986f462a-7365-44ac-8a1b-55bdeb8e5ed5",
      "name": "embed users1",
      "credentials": {
        "postgres": {
          "id": "bQ2652bC1RAcQy4j",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "fetch docs",
            "type": "main",
            "index": 0
          },
          {
            "node": "fetch dockets",
            "type": "main",
            "index": 0
          },
          {
            "node": "tag dockets",
            "type": "main",
            "index": 0
          },
          {
            "node": "tag docs",
            "type": "main",
            "index": 0
          },
          {
            "node": "embed docs1",
            "type": "main",
            "index": 0
          },
          {
            "node": "embed users1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        []
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Postgres3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres3": {
      "main": [
        []
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "stringify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres6": {
      "main": [
        []
      ]
    },
    "stringify": {
      "main": [
        [
          {
            "node": "Postgres6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "test fedreg": {
      "main": [
        []
      ]
    },
    "tag dockets": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tag docs": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI1": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "OpenAI1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Postgres2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Code7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres4": {
      "main": [
        []
      ]
    },
    "Code7": {
      "main": [
        [
          {
            "node": "Postgres4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "test regulations": {
      "main": [
        []
      ]
    },
    "fetch docs": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch dockets": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "embed docs": {
      "main": [
        [
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "doc + embeddings": {
      "main": [
        []
      ]
    },
    "Process Documents": {
      "main": [
        [
          {
            "node": "embed docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "embed users": {
      "main": [
        [
          {
            "node": "Code9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Users": {
      "main": [
        [
          {
            "node": "embed users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code9": {
      "main": [
        [
          {
            "node": "Postgres8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code8": {
      "main": [
        [
          {
            "node": "Postgres9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "embed docs1": {
      "main": [
        [
          {
            "node": "Process Documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "embed users1": {
      "main": [
        [
          {
            "node": "Process Users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3c2e2fb7-8373-4e04-afe5-9a8204ee9425",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "57da923809da51439b894e9cbb8487d25e9b17747b55bb53f40119dfffcdc195"
  },
  "id": "iemIsrAldqQYhSF7",
  "tags": []
}